package straightline;

import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import minijava.syntax.*;

parser code  {: 

  private String errorMessage = "Unknown Error";

  @Override
  public void syntax_error(java_cup.runtime.Symbol token) {
    errorMessage = "Syntax error at line " + (token.left + 1) + 
   	    ", column " + (token.right + 1) + "."; 
  } 

  @Override
  public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
    report_fatal_error(errorMessage, cur_token);
  }

  @Override
  public void report_fatal_error(String message, Object info) throws ParseException {
    throw new ParseException(message); 
  } 
  
:};


/* Terminalsymbole, die vom Lexer produziert werden. */
terminal String IDENTIFIER;
terminal Integer INTEGER_LITERAL;
terminal BECOMES;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal COMMA;
terminal LPAREN;
terminal RPAREN;
terminal SEMICOLON;

terminal LSQUARE;
terminal RSQUARE;
terminal LCURLY;
terminal RCURLY;
terminal AND;
terminal LT;
terminal NOT;
terminal DOT;

terminal CLASS;
terminal PUBLIC;
terminal STATIC;
terminal VOID;
terminal MAIN;
terminal EXTENDS;
terminal RETURN;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal THIS;
terminal NEW;

terminal TYPE_STRING;
terminal TYPE_INT;
terminal TYPE_BOOLEAN;
terminal TYPE_CHAR;

terminal SYSTEM_OUT_PRINTLN;
terminal SYSTEM_OUT_PRINT;
terminal ARRLEN;

terminal TRUE;
terminal FALSE;

// EOF is created automatically

/* Nichtterminalsymbole */
non terminal Prg Goal;
non terminal DeclMain MainClass;
non terminal DeclClass ClassDeclaration;
non terminal LinkedList<DeclClass> ClassDeclarationList;
non terminal DeclVar VarDeclaration;
non terminal LinkedList<DeclVar> VarDeclarationList;
non terminal DeclMeth MethodDeclaration;
non terminal LinkedList<DeclMeth> MethodDeclarationList;
non terminal LinkedList<Parameter> ParameterDeclarationListAndParens;
non terminal LinkedList<Parameter> ParameterDeclarationList;
non terminal Parameter ParameterDeclaration;
non terminal LinkedList<Stm> StatementList;
non terminal Stm Statement;
non terminal Exp Expression;
non terminal LinkedList<Exp> ExpressionList;
non terminal Exp ArrayLookup;
non terminal Exp ArrayLength;
non terminal LinkedList<Exp> MethodInvocationParameterList;
non terminal Ty Type;
non terminal String Identifier;

/* Praezedenzregeln */
precedence left AND;
precedence left LT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence right NEW;
precedence right NOT;
precedence left DOT;

/* Startsymbol */
start with Goal;

/* Grammatik */
Goal ::=  MainClass:m ClassDeclarationList:c
          {: RESULT = new Prg(m, c); :};

MainClass ::=
    CLASS:c Identifier:classname LCURLY PUBLIC STATIC VOID MAIN LPAREN TYPE_STRING LSQUARE RSQUARE Identifier:args RPAREN LCURLY Statement:body RCURLY RCURLY
    {: RESULT = new DeclMain(classname, args, body); :}
;

ClassDeclarationList ::=
    {: RESULT = new LinkedList<DeclClass>(); :}
  |
    ClassDeclaration:c ClassDeclarationList:l
    {: RESULT = new LinkedList<DeclClass>(l); RESULT.add(c); :}
;

ClassDeclaration ::=
    CLASS Identifier:classname LCURLY VarDeclarationList:fields MethodDeclarationList:methods RCURLY
    {: RESULT = new DeclClass(classname, null, fields, methods); :}
  |
    CLASS Identifier:classname EXTENDS Identifier:parent LCURLY VarDeclarationList:fields MethodDeclarationList:methods RCURLY
    {: RESULT = new DeclClass(classname, parent, fields, methods); :}
;

VarDeclarationList ::=
    {: RESULT = new LinkedList<DeclVar>(); :}
  |
    VarDeclarationList:l VarDeclaration:v
    {: RESULT = new LinkedList<DeclVar>(l); RESULT.addFirst(v); :}
;

VarDeclaration ::=
    Type:t Identifier:i SEMICOLON
    {: RESULT = new DeclVar(t, i); :}
;

MethodDeclarationList ::=
    {: RESULT = new LinkedList<DeclMeth>(); :}
  |
    MethodDeclaration:method MethodDeclarationList:list
    {: RESULT = new LinkedList<DeclMeth>(list); RESULT.addFirst(method); :}
;

MethodDeclaration ::=
    PUBLIC:p Type:ty Identifier:methodName ParameterDeclarationListAndParens:parameters LCURLY VarDeclarationList:localVars StatementList:body RETURN Expression:returnExp SEMICOLON RCURLY
    {: RESULT = new DeclMeth(ty, methodName, parameters, localVars, new StmList(body), returnExp); :}
;
ParameterDeclarationListAndParens ::=
    LPAREN RPAREN
    {: RESULT = new LinkedList<Parameter>(); :}
  |
    LPAREN ParameterDeclarationList:l RPAREN
    {: RESULT = new LinkedList<Parameter>(l); :}
;

ParameterDeclarationList ::=
    ParameterDeclaration:p COMMA ParameterDeclarationList:l
    {: RESULT = new LinkedList<Parameter>(l); RESULT.addFirst(p); :}
  |
    ParameterDeclaration:p
    {: RESULT = new LinkedList<Parameter>(Collections.singletonList(p)); :}
;

ParameterDeclaration ::=
    Type:ty Identifier:id
    {: RESULT = new Parameter(id, ty); :}
;

StatementList ::=
    {: RESULT = new LinkedList<Stm>(); :}
  |
    Statement:s StatementList:l
    {: RESULT = new LinkedList<Stm>(l); RESULT.addFirst(s); :}
;

Statement ::=
    Identifier:id BECOMES Expression:rhs SEMICOLON
    {: RESULT = new StmAssign(id, rhs); :}
  |
    IF:ifKeyword LPAREN Expression:cond RPAREN Statement:bodyTrue ELSE Statement:bodyFalse
    {: RESULT = new StmIf(cond, bodyTrue, bodyFalse); :}
  |
    SYSTEM_OUT_PRINT LPAREN:l1 LPAREN:l2 TYPE_CHAR RPAREN:r2 Expression:arg RPAREN:r1 SEMICOLON
    {: RESULT = new StmPrintChar(arg); :}
  |
    SYSTEM_OUT_PRINTLN:s LPAREN Expression:arg RPAREN SEMICOLON
    {: RESULT = new StmPrintlnInt(arg); :}
  |
    Identifier:id LSQUARE Expression:index RSQUARE BECOMES Expression:rhs SEMICOLON
    {: RESULT = new StmArrayAssign(id, index, rhs); :}
  |
    WHILE:w LPAREN Expression:cond RPAREN Statement:body
    {: RESULT = new StmWhile(cond, body); :}
  |
    LCURLY StatementList:stms RCURLY
    {: RESULT = new StmList(stms); :}
;

Expression  ::=
    Identifier:id
    {: RESULT = new ExpId(id); :}
  |
    Expression:arg1 PLUS Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.PLUS, arg2); :}
  |
    Expression:arg1 MINUS Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.MINUS, arg2); :}
  |
    Expression:arg1 TIMES Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.TIMES, arg2); :}
  |
    Expression:arg1 DIVIDE Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.DIV, arg2); :}
  |
    Expression:arg1 LT Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.LT, arg2); :}
  |
    Expression:arg1 AND Expression:arg2
    {: RESULT = new ExpBinOp(arg1, ExpBinOp.Op.AND, arg2); :}
  |
    NOT:not Expression:body
    {: RESULT = new ExpNeg(body); :}
  |
    TRUE:t
    {: RESULT = new ExpTrue(); :}
  |
    FALSE:f
    {: RESULT = new ExpFalse(); :}
  |
    THIS:t
    {: RESULT = new ExpThis(); :}
  |
    NEW:n Identifier:classname LPAREN RPAREN
    {: RESULT = new ExpNew(classname); :}
  | ArrayLength:arrlen
    {: RESULT = arrlen; :}
  | ArrayLookup:arrlookup
    {: RESULT = arrlookup; :}
  |
    NEW:n TYPE_INT LSQUARE Expression:size RSQUARE
    {: RESULT = new ExpNewIntArray(size); :}
  |
    Expression:obj DOT Identifier:method MethodInvocationParameterList:args
    {: RESULT = new ExpInvoke(obj, method, args); :}
  |
    LPAREN Expression:expr RPAREN
    {: RESULT = expr; :}
  |
    INTEGER_LITERAL:value
    {: RESULT = new ExpIntConst(value); :}
;


ArrayLength ::=
    Expression:body DOT ARRLEN
    {: RESULT = new ExpArrayLength(body); :}
;

ArrayLookup ::=
    Expression:array LSQUARE Expression:index RSQUARE
    {: RESULT = new ExpArrayGet(array, index); :}
;

MethodInvocationParameterList ::=
    LPAREN:l RPAREN:r
    {: RESULT = new LinkedList<Exp>(); :}
  |
    LPAREN:l ExpressionList:e RPAREN
    {: RESULT = new LinkedList<Exp>(e); :}
;

Type ::=
    TYPE_INT:i
    {: RESULT = new TyInt(); :}
  |
    TYPE_BOOLEAN:b
    {: RESULT = new TyBool(); :}
  |
    Identifier:classname
    {: RESULT = new TyClass(classname); :}
  |
    TYPE_INT:i LSQUARE RSQUARE
    {: RESULT = new TyArr(new TyInt()); :}
;

ExpressionList ::=
    Expression:e
    {: RESULT = new LinkedList<Exp>(Collections.singletonList(e)); :}
  | Expression:e COMMA ExpressionList:l
    {: RESULT = new LinkedList<Exp>(l); RESULT.addFirst(e); :}
;

Identifier ::=
    IDENTIFIER:id
    {: RESULT = id; :}
;
